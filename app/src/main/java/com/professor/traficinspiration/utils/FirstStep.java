package com.professor.traficinspiration.utils;

import android.util.Log;

import com.professor.traficinspiration.ApplicationContext;
import com.professor.traficinspiration.model.messages.EncryptionRequestMessage;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
//import java.util.Base64;
 
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec; 

import org.apache.commons.codec.binary.Base64;

import java.math.BigInteger;
//import java.util.ArrayList;
import java.util.Random;




//import javax.crypto.KeyGenerator;
//import java.security.SecureRandom;

public class FirstStep {

	private static SecretKeySpec secretKey;
	private static byte[] key;
	private static final String ACTION_SET_KEY = "setKeys";
    
	public static EncryptionRequestMessage genetateEncryptionRequestMessage()	{


				
		String keyAES = FirstStep.getKey();
		ApplicationContext.setKeyAES(keyAES);

		String keyMAC = FirstStep.getKey();
		ApplicationContext.setKeyMAC(keyMAC);
		
		String sequence = Integer.toString(FirstStep.getSequence());
		ApplicationContext.setSequence(sequence);


		String sequenceAES = FirstStep.encrypt(sequence, keyAES);
		String sequenceMAC = FirstStep.encrypt(sequenceAES, keyMAC);
		
		BigInteger keyMod = new BigInteger("4128129803496668451833756170118141868851614705806314994203614389510613404539543352564468242326067417323817062813109724033546102916918446969287233378526867");
		BigInteger keyExp = new BigInteger("3127925502487553883617082248057751761281245073620963837458066168905990700262438767821460201762431802142515638993587131725483191226686428040565351502696063");
		
		
		String encryptedKeyAES = FirstStep.encryptRSA(keyAES, keyExp, keyMod);
		String encryptedKeyMAC = FirstStep.encryptRSA(keyMAC, keyExp, keyMod); 
		
		Log.i("1","sequence - "+sequence);
		Log.i("1","keyAES - "+keyAES);
		Log.i("1","keyMAC - "+keyMAC);

		Log.i("1","\n----------- Параметры запроса ----------\n");

		Log.i("1","sequence - "+sequenceAES);
		Log.i("1","sequenceMAC - "+sequenceMAC);
		Log.i("1","encryptedKeyAES - "+encryptedKeyAES);
		Log.i("1","encryptedKeyMAC - "+encryptedKeyMAC);

		EncryptionRequestMessage encryptionRequestMessage =
				new EncryptionRequestMessage(ACTION_SET_KEY,sequenceAES,sequenceMAC,encryptedKeyAES,encryptedKeyMAC);
//				new EncryptionRequestMessage(ACTION_SET_KEY,"vBE3G2LZAOmmk8yqsVgX9Q==",
//						"KyR38FNDIiRDSSF7p6cqjnxdg06dAgB3ldbq7kHyPSI=",
//						"3226949478450376286989943553106120937121932316256998234524415027664574941362173837862807294271653548263300931769104724807911937528775225048596215564903362|3991655153482467050714749106489861832388344873436425122440392999364508840394385787567466630849918426170339247585573624775614672087972697674345224076457919|1468509310790721241318893346156082811917314515571352676219897335523052075928884063142200266204544558770385640989582160673545623144853017754861181539615233|3991655153482467050714749106489861832388344873436425122440392999364508840394385787567466630849918426170339247585573624775614672087972697674345224076457919|2517713024332620115679661645630141388194336911192976438276089172150987864609496833553317415993027754598867710524476514105035769595229836754996418612716464|1248292083231487273006627151855373920722966202035271696481128846923316392431763426455941790844284455175331332020742739649869536136862860057848534079885841|290905651403217254067672475802334145738779504046634623288790443606248636809143146931581017055946069642191469051828368099175270423196996616067544183361927|2991642117315267733889890958548756476738543712368870426399706750858630738550425350711489513053722851443938087062823571433370805842137787837683263219600742|1916748449800289913099969265178155567431766181885123755969958190528052082216980753005819062396690450272632104916081999796614951423609131677245437290662766|1468509310790721241318893346156082811917314515571352676219897335523052075928884063142200266204544558770385640989582160673545623144853017754861181539615233|1874987969959733082100253562762138634389230518184738909581569430009760175888980938896958272122106696662541413199552870147079117250859125716564197898991732|3774837279661753914568091719958184547515559136594377127998238363916572446651723723012020913240687817503565579057070948988367852294873870271251075423458788|159240073422684986894401399009374454442652165962183305795352406411647200096615986069604491361046065466232897532223614145029558368146103458262280064967087|1324344200253499933685552739628849158980059446123484226225778745694025947948901678666774381222112535703175292322869116611111946243073823246272284964406655|1483405058937635368108669658805081410420573434657211620306095970934418260524714329249015377894157307101686246512450588191695249440606066343405973209954204|1978446016361971961829292897642688737446428154846345594609157172799339279673905386361758355789435899537153367463117681887805041963180959807322914335945362",
//						"3774837279661753914568091719958184547515559136594377127998238363916572446651723723012020913240687817503565579057070948988367852294873870271251075423458788|3991655153482467050714749106489861832388344873436425122440392999364508840394385787567466630849918426170339247585573624775614672087972697674345224076457919|4026480076153747121571303205218697854904360636212351309886443366652138862489440994263580755063466097322912381613669036573569673169243028098357435988249535|2728535310722027382062019280974074864004432616686688326934941485254661023988326872701343228006298104830604122282713500791026318358711021086711546168922877|1387208745721781789900182812335004346104160824019781730161394215522546103314575289495045148079522889502308366602398904378651560774040212945281432752270578|1267196433219063691674723009938962523401926364160773078431309068858439760246748021513536679299434252888415361341153696187349521227864515358574640969131696|945055186004559802836896381458262709866437139083638937717760830208864952836269417393521846915638705355441031432616670343771477479037521360023942052532876|357582978299475556709203100541857009295557053272225771784333557869038776609377562061019397720262025754680793722256829840271386970697725003383468016498715|553132107434021666697332482127795452082062750322379425344970379760587203476763370310307902188084806924018227869874233027929620676366567124872049093600840|4090949629777024546307209554894986028316444537104652883129458357269074069790667463410300407266727434565108934814788331823995740292538997276318282172612073|2201769431422441966877117304796390281720316640368155225009541761781212745122791520484136332282086289712020748419254016604565620114588773652579016307833621|1524450486697110329043010399978188664898889405235730158698166417573060515366544856444097381835695554912315049055037084962997124124483776806851270035070707|2728535310722027382062019280974074864004432616686688326934941485254661023988326872701343228006298104830604122282713500791026318358711021086711546168922877|159240073422684986894401399009374454442652165962183305795352406411647200096615986069604491361046065466232897532223614145029558368146103458262280064967087|779871292796971260767056525708583599502447798144226844440662444995105762521962562271210944593103443461240213135743876248753415395822364154247350970919961|2463371469547441169896091287895945220373283223053511430585349208431597347091109260266282437579622318790514482231839840668915126330709192446428210911509889");

		return encryptionRequestMessage;

		
	}
	
	
	public static String encryptRSA(String keyAES, BigInteger keyExp, BigInteger keyMod)
    {
		
		String encryptedKey = "";
		for(int i=0; i < keyAES.length(); i++) {
			char symbol = keyAES.charAt(i);
			
			String symbolEnc = FirstStep.work(symbol, keyExp, keyMod);
			encryptedKey += symbolEnc;
			
			if(i<(keyAES.length()-1)) {
				encryptedKey += "|";
			}
		}
		return encryptedKey;
    }
	
	
	public static void setKey(String myKey)
    {
        MessageDigest sha = null; 
        try {
            key = myKey.getBytes("UTF-8");
            sha = MessageDigest.getInstance("SHA-1");
            key = sha.digest(key);
            key = Arrays.copyOf(key, 16);
            secretKey = new SecretKeySpec(key, "AES");
            
        }
        catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }
 
	
	public static String encrypt(String input, String key){
	  byte[] crypted = null;
	  try{
	    SecretKeySpec skey = new SecretKeySpec(key.getBytes(), "AES");
	      Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
	      cipher.init(Cipher.ENCRYPT_MODE, skey);
	      crypted = cipher.doFinal(input.getBytes());
	    }catch(Exception e){
	    	System.out.println(e.toString());
	    }
	    return new String(Base64.encodeBase64(crypted));
	}
	

	public static String decrypt(String input, String key){
	    byte[] output = null;
	    try{
	      SecretKeySpec skey = new SecretKeySpec(key.getBytes(), "AES");
	      Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
	      cipher.init(Cipher.DECRYPT_MODE, skey);
	      output = cipher.doFinal(Base64.decodeBase64(input));
	    }catch(Exception e){
	      System.out.println(e.toString());
	    }
	    return new String(output);
	}
	
	
	public static String work(char character, BigInteger keyExp, BigInteger keyMod) {
		
		int symbNum = (int) character;
		
		BigInteger num = new BigInteger(Integer.toString(symbNum));
		
		String output = "" + num.modPow(keyExp, keyMod);
		
		return output;
	}
	
	
	public static String getKey() {
		
		char[] symbols = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".toCharArray();
		
		StringBuilder b = new StringBuilder();
		Random r = new Random();
		for (int i = 0; i < 16; i++) {
			b.append(symbols[r.nextInt(62)]);
		}
		return b.toString();
		
	}
	
	
	
	public static String getString() {
		
		char[] symbols = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".toCharArray();
		
		StringBuilder b = new StringBuilder();
		Random r = new Random();
		for (int i = 0; i < 50; i++) {
			b.append(symbols[r.nextInt(62)]);
		}
		//System.out.println(b.toString());
		return b.toString();
		
	}
	
	
	
	public static Integer getSequence() {
		
		Random r = new Random();
		return r.nextInt(1000);
		
	}
	
	
}